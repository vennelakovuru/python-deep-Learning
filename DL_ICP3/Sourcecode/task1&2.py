# -*- coding: utf-8 -*-
"""Task1&2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EoWaRMs3g9K6AJgbznVS0wh95BmEyiWd
"""

#Importing required packages
import pandas as pd
import numpy as np
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras import layers
from keras.preprocessing.text import Tokenizer
import matplotlib.pyplot as plt

#Loading dataset 
df = pd.read_csv('imdb_master.csv',encoding='latin-1')
print(df.head())

#tokenizing reviews
sentences = df['review'].values

#label column for the prediction
y = df['label'].values

"""Task1.	In the code provided, there are three mistake which stop the code to get run successfully; find those mistakes and explain why they need to be corrected to be able to get the code run"""

#tokenizing data
tokenizer = Tokenizer(num_words=2000)
tokenizer.fit_on_texts(sentences)
#getting the vocabulary of data
sentences = tokenizer.texts_to_matrix(sentences)

#converting Categorical data to Numerical data using Label Encoding
le = preprocessing.LabelEncoder()
#applying label encoding 
y = le.fit_transform(y)

#splitting into test data and train data
X_train, X_test, y_train, y_test = train_test_split(sentences, y, test_size=0.25, random_state=1000)

#Shape of the X_train Matrix
X_train.shape[0:]

# Number of features
# print(input_dim)
#Sequential Neural Network
model = Sequential() 
#hidden layer 300neurons and input layer 2000 Neurons
model.add(layers.Dense(300,input_dim=2000, activation='relu'))
#Output layer 3neurons, softmax as activation
model.add(layers.Dense(3, activation='softmax'))
model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['acc'])
history=model.fit(X_train,y_train, epochs=5, verbose=True, validation_data=(X_test,y_test), batch_size=256)

#Calculating loss, accuracy
[testloss, testaccuracy] = model.evaluate(X_test,y_test)
print("Test Data evaluation: Loss = {}, accuracy = {}".format(testloss, testaccuracy))

print(history.history.keys())

plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['accuracy', 'validation accuracy','loss','validation loss'], loc='upper left')
plt.show()

"""Task 2.	Add embedding layer to the model, did you experience any improvement?

"""

#Importing package for padding data
from keras.preprocessing.sequence import pad_sequences

pure_sentences=df['review']
#calculating max reviews length
maxrev_len= max([len(s.split()) for s in pure_sentences])
#calculating Vocabulary size
vocab_size= len(tokenizer.word_index)+1 
#Vector Tokenization 
sentences_pre = tokenizer.texts_to_sequences(pure_sentences) 
#Padding sentences
padded_docs= pad_sequences(sentences_pre,maxlen=maxrev_len) 

#converting Categorical data to Numerical data using Label Encoding
le = preprocessing.LabelEncoder()
y = le.fit_transform(y)#applying label encoding on label matrix

#splitting into test and train data 
X_train, X_test, y_train, y_test = train_test_split(padded_docs, y, test_size=0.25, random_state=1000)

print("vocab_size:",vocab_size)
print("max_review_len:",maxrev_len)

from keras.layers import Embedding, Flatten

model = Sequential()#Sequential Neural Network model
model.add(Embedding(vocab_size, 50, input_length=2470))#Embedding layer with 2470 neurons
model.add(Flatten())#Flattening the Network
model.add(layers.Dense(300, activation='relu',input_dim=2470))#hidden layer with 300neurons, input layer with 2470 Neurons
model.add(layers.Dense(3, activation='softmax'))#Output layer with 3neurons, softmax as activation
model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['acc'])
history=model.fit(X_train,y_train, epochs=5, verbose=True, validation_data=(X_test,y_test), batch_size=256)

print(history.history.keys())

#Calculating loss & accuracy
[testloss1, testaccuracy1] = model.evaluate(X_test,y_test)
print("Test Data result with Embedded layer: Loss = {}, accuracy = {}".format(testloss1, testaccuracy1))

"""plot"""

plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['accuracy', 'validation accuracy','loss','validation loss'], loc='upper left')
plt.show()

print("Evaluation result on Test Data : Loss = {}, accuracy = {}".format(testloss, testaccuracy))
print("Evaluation result on Test Data with Embedded layer: Loss = {}, accuracy = {}".format(testloss1, testaccuracy1))
print("Actual Value:",y_test[7],"Predicted Value",model.predict_classes(X_test[[7],:]))